public class TambolaBoard {

    Node[] columns; // Changed from 'rows' to 'columns'

    public TambolaBoard() {
        columns = new Node[9]; // 9 columns
        for (int i = 0; i < 9; i++) {
            columns[i] = generateColumn(i * 10 + 1, (i + 1) * 10); // i represents the column number
        }
    }

    // Generate a column of numbers in linked list
    private Node generateColumn(int start, int end) {
        Node dummy = new Node(-1); // Dummy node to simplify insertion
        Node current = dummy;

        Random rand = new Random();
        int[] selectedIndices = new int[5]; // Array to store the indices of selected numbers

        // Generate 5 random numbers within the range [start, end] and insert them into the linked list
        for (int i = 0; i < 5; i++) {
            int num = rand.nextInt(end - start + 1) + start;
            current.next = new Node(num);
            current = current.next;
            selectedIndices[i] = num;
        }

        Random rand2 = new Random(8);
        
        // Fill the rest of the column with -1
        for (int num = start; num <= end; num++) {
            if (!contains(selectedIndices, num)) { // Check if num is not among the selected numbers
                current.next = new Node(-1);
                current = current.next;
            }
        }

        return dummy.next;
    }

    // Helper method to check if an array contains a specific value
    private boolean contains(int[] arr, int target) {
        for (int num : arr) {
            if (num == target) {
                return true;
            }
        }
        return false;
    }

    // Display the Tambola board
    public void displayBoard() {
        for (int i = 0; i < 3; i++) { // We iterate 3 times for each row
            for (int j = 0; j < 9; j++) {
                Node current = columns[j];
                // Move to the i-th node in the current column
                for (int k = 0; k < i; k++) {
                    current = current.next;
                }
                System.out.print(current.data + "\t");
            }
            System.out.println();
        }
    }
    
    public int drawNum() {
        Random rand = new Random();
        int num = rand.nextInt(90) + 1;
        insert(num); // Insert the drawn number into the linked list
        return num;
    }
    
    Node head;
    // Insert method for adding drawn numbers to the linked list
    private void insert(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            Node temp = head;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = newNode;
        }
    }
}
